// PROCEDURE FOR CREATING USERS

DELIMITER //

CREATE PROCEDURE createUser(IN username VARCHAR(255), IN hashPass TEXT, IN email TEXT, OUT userID INT)
	BEGIN
    	INSERT INTO users (username, password, email) VALUES (username, hashPass, email);
        SELECT LAST_INSERT_ID() INTO @userID FROM users LIMIT 1;
        SELECT CONCAT(username, '\'s Feed') INTO @feedTitle;
        CALL newFeed(@feedTitle, @userID, NULL, 0, 0, @feedID);
				INSERT INTO user_permissions (userID, permissionID, feedID) VALUES (@userID, 2, @feedID);
				INSERT INTO user_permissions (userID, permissionID, feedID) VALUES (@userID, 4, @feedID);
        SET userID = @userID;
    END//

// PROCEDURE CALL

CALL createUser('asdasdsadsa', 'savdhasbdhajs', 'asdgasudbhdsal', @out_userID);

SELECT @out_userID;


// PROCEDURE FOR CREATING FEEDS

DELIMITER //

CREATE PROCEDURE newFeed(IN feedname TEXT, IN linkedBy INT, IN url VARCHAR(255), IN isExternal INT, IN isClassFeed INT, OUT feedID INT)
	BEGIN
		INSERT INTO feeds (linkedBy, isExternalFeed, referenceTitle) VALUES (linkedBy, isExternal, feedname);
		SELECT LAST_INSERT_ID() INTO @feedID FROM feeds LIMIT 1;
		IF (isExternal = 1) THEN
				INSERT INTO external_feeds (externalFeedID, url, title) VALUES (@feedID, url, feedname);
			ELSE
				INSERT INTO user_feeds (internalFeedID, title, isClassFeed) VALUES (@feedID, feedname, isClassFeed);
			END IF;
		SET feedID = @feedID;
	END //
		
		
// PROCEDURE FOR ENTERING ARTICLES

DELIMITER //

CREATE PROCEDURE newEntry(IN sourceSiteID INT, IN sourceFeedID INT, IN entryTitle TEXT, IN entryURL VARCHAR(255), IN pubDate DATETIME, IN imageURL TEXT, IN excerpt TEXT)
	BEGIN
		INSERT INTO entries (siteID, title, url, datePublished, featureImage, previewText) VALUES (sourceSiteID, entryTitle, entryURL, pubDate, imageURL, excerpt);
		SELECT LAST_INSERT_ID() INTO @entryID FROM entries LIMIT 1;
		INSERT INTO entry_connections (entryID, feedID) VALUES (@entryID, sourceFeedID);
	END //
		
		
// NEW ENTRY CONNECTION PROCEDURE ON DUPLICATE
// This procedure prevents a duplicate connection from being made

DELIMITER //

CREATE PROCEDURE newEntryConnection(IN entryURL VARCHAR(255), IN sourceFeedID INT, OUT duplicate INT)
	BEGIN
		SELECT entryID INTO @entryID FROM entries WHERE url = entryURL;
		SELECT entryID INTO @duplicateCheck FROM entry_connections WHERE entryID = @entryID AND feedID = sourceFeedID;
		IF (@duplicateCheck IS NULL) THEN
			INSERT INTO entry_connections (entryID, feedID) VALUES (@entryID, sourceFeedID);
			SET duplicate = 0;
		ELSE 
			SET duplicate = 1;
		END IF;
	END //
