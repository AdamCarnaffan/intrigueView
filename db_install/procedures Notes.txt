// PROCEDURE CALL

CALL createUser('asdasdsadsa', 'savdhasbdhajs', 'asdgasudbhdsal', @out_userID);

SELECT @out_userID;

// PROCEDURE ADDITIONS

DELIMITER /

CREATE PROCEDURE `addTag` (IN `tag_name` VARCHAR(35), IN `ent_id` INT, IN `srtord` INT)  BEGIN
		SELECT tag_id INTO @tg_id FROM tags WHERE tag = tag_name LIMIT 1;
		IF (@tg_id IS NULL) THEN
        	INSERT INTO tags (tag) VALUES (tag_name);
		END IF;
        INSERT INTO entry_tags (entry_id, tag_id, sort_order) VALUES (ent_id, (SELECT tag_id FROM tags WHERE tag = tag_name LIMIT 1), srtord);
    END/

CREATE PROCEDURE `connectEntry` (IN `url_add` VARCHAR(255), IN `fd_id` INT)  BEGIN
    	SELECT entry_id INTO @pulled_entry_id FROM entries WHERE url = url_add;
        SELECT conn_id INTO @conned FROM feed_entries WHERE feed_id = fd_id AND entry_id = @pulled_entry_id;
        IF @conned IS NOT NULL THEN
    		INSERT INTO feed_entries (entry_id, feed_id) VALUES (@pulled_entry_id, fd_id);
        END IF;
    END/



CREATE PROCEDURE `createUser` (IN `username` VARCHAR(24), IN `passwrd` TEXT, IN `email` VARCHAR(255), OUT `usr_id` INT(11), OUT `coll_id` INT(11))  BEGIN
    	INSERT INTO `users` (username, password, email) VALUES (username, passwrd, email);
        SELECT LAST_INSERT_ID() INTO @v_user_id FROM `users` LIMIT 1;
        INSERT INTO `collections` (owner, title, description) VALUES (@v_user_id, 'Saved', 'A Collection of all of your saved readings');
        SELECT LAST_INSERT_ID() INTO @v_coll_id FROM `collections` LIMIT 1;
        INSERT INTO `collection_users` (user_id, collection_id) VALUES (@v_user_id, @v_coll_id);
       	SET usr_id = @v_user_id;
        SET coll_id = @v_coll_id;
    END/



CREATE PROCEDURE `newEntry` (IN `st_id` INT, IN `fd_id` INT, IN `ttl` TEXT, IN `url_add` VARCHAR(255), IN `dt` DATETIME, IN `image` TEXT, IN `synopsis_add` TEXT, OUT `newID` INT)  BEGIN
    	INSERT INTO entries (site_id, title, url, published, thumbnail, synopsis) VALUES (st_id, ttl, url_add, dt, image, synopsis_add);
        SELECT LAST_INSERT_ID() INTO @new FROM entries LIMIT 1;
        INSERT INTO feed_entries (feed_id, entry_id) VALUES (fd_id, @new);
        INSERT INTO entry_log (entry_id, status, success) VALUES (@new, 'Adding the entry succeeded', 1);
        SET newID = @new;
    END/



CREATE PROCEDURE `startFetchLog` (IN `fd_id` INT, OUT `sess_id` INT)  BEGIN
    	SELECT IFNULL(MAX(fetch_id) + 1, 1) INTO @tt FROM fetch_log;
    	INSERT INTO fetch_log (fetch_id, feed_id, status, success) VALUES (@tt, fd_id, 'Began Fetch Procedure', 1);
        SET sess_id = @tt;
    END/


// EMPTY ALL ENTRY TABLES

TRUNCATE TABLE entries;
TRUNCATE TABLE entry_connections;
TRUNCATE TABLE entry_tags;
TRUNCATE TABLE tags;
TRUNCATE TABLE sites;

// SELECT FROM BOTH FEED TABLES

On internal, feedImage is User Profile Image by default, or set image where available
On external, an Image is set or the default image is applied

SELECT externalFeedID AS feedID FROM external_feeds
UNION
SELECT internalFeedID FROM user_feeds
WHERE active = 1 AND isPrivate = 0

// Show temp tables
SHOW TABLES FROM INFORMATION_SCHEMA LIKE 'INNODB_TEMP%'

// Create temp table
CREATE TEMPORARY TABLE name (col_1 TYPE, col_2 TYPE)

// Build recommendations --> SELECT IN () runs in order of the things, not checking each id for each
CREATE TEMPORARY TABLE recommend (recomID INT, entryID INT, primaryTagID INT)
